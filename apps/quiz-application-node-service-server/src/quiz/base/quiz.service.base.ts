/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Quiz as PrismaQuiz,
  Result as PrismaResult,
} from "@prisma/client";
import { QuizCreateInput } from "./QuizCreateInput";
import { Quiz } from "./Quiz";

export class QuizServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QuizCountArgs, "select">): Promise<number> {
    return this.prisma.quiz.count(args);
  }

  async quizzes(args: Prisma.QuizFindManyArgs): Promise<PrismaQuiz[]> {
    return this.prisma.quiz.findMany(args);
  }
  async quiz(args: Prisma.QuizFindUniqueArgs): Promise<PrismaQuiz | null> {
    return this.prisma.quiz.findUnique(args);
  }
  async createQuiz(args: Prisma.QuizCreateArgs): Promise<PrismaQuiz> {
    return this.prisma.quiz.create(args);
  }
  async updateQuiz(args: Prisma.QuizUpdateArgs): Promise<PrismaQuiz> {
    return this.prisma.quiz.update(args);
  }
  async deleteQuiz(args: Prisma.QuizDeleteArgs): Promise<PrismaQuiz> {
    return this.prisma.quiz.delete(args);
  }

  async findResults(
    parentId: string,
    args: Prisma.ResultFindManyArgs
  ): Promise<PrismaResult[]> {
    return this.prisma.quiz
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .results(args);
  }
  async CreateQuiz(args: QuizCreateInput): Promise<Quiz> {
    throw new Error("Not implemented");
  }
}
